syntax = "proto3";
package proto;


// CreateStreamRequest is sent to create a new stream.
message CreateStreamRequest {
    string subject           = 1; // Stream NATS subject
    string name              = 2; // Stream name (unique per subject)
    string group             = 3; // Partitions NATS subject amongst group members
    int32  replicationFactor = 4; // Number of stream replicas
}

// CreateStreamResponse is sent by server after creating a stream.
message CreateStreamResponse {
    // Intentionally empty.
}

message SubscribeRequest {
    string subject  = 1;
    string name     = 2;
    int64  offset   = 3;
}

message FetchMetadataRequest {
    repeated StreamDescriptor streams = 1;
}

message FetchMetadataResponse {
    repeated Broker         brokers  = 1;
    repeated StreamMetadata metadata = 2;
}

message Broker {
    string id   = 1;
    string host = 2;
    int32  port = 3;
}

message StreamDescriptor {
    string subject = 1;
    string name    = 2;
}

message StreamMetadata {
    enum Error {
        OK             = 0;
        UNKNOWN_STREAM = 1;
    }
    StreamDescriptor stream   = 1;
    Error            error    = 2;
    string           leader   = 3;
    repeated string  replicas = 4;
    repeated string  isr      = 5;
}

message Message {
    int64               offset    = 1;
    bytes               key       = 2;
    bytes               value     = 3;
    int64               timestamp = 4;
    string              subject   = 5;
    string              reply     = 6;
    map<string, bytes>  headers   = 7;
    string              ackInbox  = 8;
}

message Ack {
    string streamSubject = 1;
    string streamName    = 2;
    string msgSubject    = 3;
    int64  offset        = 4;
    string ackInbox      = 5;
}


service API {
    rpc CreateStream(CreateStreamRequest) returns (CreateStreamResponse) {}
    rpc Subscribe(SubscribeRequest) returns (stream Message) {}
    rpc FetchMetadata(FetchMetadataRequest) returns (FetchMetadataResponse) {}
}
